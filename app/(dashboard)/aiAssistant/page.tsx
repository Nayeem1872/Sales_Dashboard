"use client";

import type React from "react"; // Not strictly necessary with modern TS/React but good practice
import { useState, useRef, useEffect } from "react";
import {
  Send,
  Bot,
  User,
  Loader2,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Brain,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast"; // Ensure this path is correct

interface Message {
  id: string;
  type: "user" | "ai";
  content: string;
  timestamp: Date;
  analysis?: {
    // Optional: for more advanced AI responses
    sentiment: "positive" | "negative" | "neutral";
    confidence: number;
    suggestions?: string[];
  };
}

interface AIInsight {
  id: string;
  title: string;
  description: string;
  type: "warning" | "success" | "info";
  impact: "high" | "medium" | "low";
  action?: string;
}

// Helper function to provide general context to the AI
// In a real app, this might be fetched or generated more dynamically
const getGeneralBusinessSummary = (): string => {
  return `
  Overall Business Status (snapshot):
  - Monthly Sales Trend: Currently reported as +23% compared to last month.
  - Top Selling Product: 'Super Widget'.
  - Customer Sentiment: Generally positive.
  - Recent Marketing: "Spring Sale" campaign recently concluded.
  - Inventory Note: 'Advanced Gadget' might need restocking.
  - Key Figures: Revenue YTD is around $250,000 with 1200 active customers.
  This is a high-level summary. The AI can provide more details if asked specific questions based on this context or general business knowledge.
  `.trim();
};

export default function AIAssistantPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "initial-ai-message",
      type: "ai",
      content:
        "Hello! I'm your AI Sales Assistant. I can help you analyze your sales data, provide insights, and answer questions about your business performance. What would you like to know?",
      timestamp: new Date(),
      analysis: {
        // Example analysis for the initial message
        sentiment: "positive",
        confidence: 0.95,
      },
    },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null); // Correctly typed for ScrollArea's underlying div
  const { toast } = useToast();

  // Static AI Insights for the top section - these are not generated by the chat AI in this version
  const [aiInsights] = useState<AIInsight[]>([
    {
      id: "insight-1",
      title: "Sales Performance Alert",
      description:
        "Your sales have increased by 23% this month compared to last month. This is above the industry average of 15%.",
      type: "success",
      impact: "high",
      action: "Consider increasing inventory for high-performing products.",
    },
    {
      id: "insight-2",
      title: "Customer Retention Opportunity",
      description:
        "AI detected that customers who purchase on Fridays have 40% higher lifetime value. Consider targeted Friday promotions.",
      type: "info",
      impact: "medium",
      action: "Create Friday-specific marketing campaigns.",
    },
    {
      id: "insight-3",
      title: "Inventory Warning",
      description:
        "Based on current trends, you may run out of top-selling items in 2 weeks. Consider restocking soon.",
      type: "warning",
      impact: "high",
      action: "Review and update inventory levels.",
    },
  ]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessageContent = inputMessage.trim();
    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: userMessageContent,
      timestamp: new Date(),
    };

    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInputMessage(""); // Clear input after sending
    setIsLoading(true);

    try {
      const businessContextSummary = getGeneralBusinessSummary();

      const response = await fetch("/api/askGemini", {
        // Your backend API endpoint
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userInput: userMessageContent,
          dashboardDataSummary: businessContextSummary,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(
          data.details || data.error || "Failed to get AI response from server."
        );
      }

      const aiResponseContent = data.answer; // Assuming your API returns { answer: "..." }

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(), // Simple unique ID
        type: "ai",
        content: aiResponseContent,
        timestamp: new Date(),
        // For a real app, you might get sentiment/confidence from the AI too,
        // or run a separate lightweight client-side analysis.
        analysis: {
          sentiment: "neutral", // Default for now
          confidence: 0.8, // Default for now
        },
      };
      setMessages((prevMessages) => [...prevMessages, aiMessage]);
    } catch (error: any) {
      console.error("Error sending message to AI:", error);
      toast({
        title: "AI Error",
        description:
          error.message ||
          "Could not connect to the AI assistant. Please try again.",
        variant: "destructive",
      });
      // Optionally add an error message to the chat UI
      const aiErrorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "ai",
        content: `I encountered an issue: ${
          error.message || "Please try again later."
        }`,
        timestamp: new Date(),
      };
      setMessages((prevMessages) => [...prevMessages, aiErrorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    // Typed event for Input
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault(); // Prevent default form submission if input is in a form
      handleSendMessage();
    }
  };

  useEffect(() => {
    // Auto-scroll to the bottom of the chat
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTo({
        top: scrollAreaRef.current.scrollHeight,
        behavior: "smooth",
      });
    }
  }, [messages]);

  const getInsightIcon = (type: AIInsight["type"]) => {
    // Use type from AIInsight
    switch (type) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case "warning":
        return <AlertCircle className="h-4 w-4 text-yellow-500" />;
      case "info":
      default:
        return <TrendingUp className="h-4 w-4 text-blue-500" />;
    }
  };

  const getInsightColor = (type: AIInsight["type"]) => {
    switch (type) {
      case "success":
        return "border-green-200 bg-green-50";
      case "warning":
        return "border-yellow-200 bg-yellow-50";
      case "info":
      default:
        return "border-blue-200 bg-blue-50";
    }
  };

  return (
    <div className="container mx-auto p-4 md:p-6 lg:p-8 space-y-6">
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">
            AI Sales Assistant
          </h1>
          <p className="text-muted-foreground">
            Get intelligent insights and chat with your AI business advisor.
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Badge
            variant="outline"
            className="bg-green-100 text-green-700 border-green-300" // Slightly adjusted colors
          >
            <Brain className="h-3 w-3 mr-1" />
            AI Active
          </Badge>
        </div>
      </div>

      {/* AI Insights Section */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {aiInsights.map((insight) => (
          <Card
            key={insight.id}
            className={`${getInsightColor(insight.type)} border shadow-sm`} // Added shadow
          >
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  {getInsightIcon(insight.type)}
                  <CardTitle className="text-sm font-medium">
                    {insight.title}
                  </CardTitle>
                </div>
                <Badge
                  variant={
                    // More dynamic badge styling based on impact
                    insight.impact === "high"
                      ? "destructive"
                      : insight.impact === "medium"
                      ? "default" // Assuming default is a neutral/info style
                      : "secondary"
                  }
                  className="text-xs px-2 py-0.5" // Adjusted padding
                >
                  {insight.impact.charAt(0).toUpperCase() +
                    insight.impact.slice(1)}{" "}
                  Impact
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <p className="text-sm text-muted-foreground mb-2">
                {insight.description}
              </p>
              {insight.action && (
                <p className="text-xs font-medium text-blue-600 hover:underline cursor-pointer">
                  ðŸ’¡ Action: {insight.action}
                </p>
              )}
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Chat Interface */}
      <Card className="h-[calc(100vh-400px)] min-h-[500px] flex flex-col shadow-lg">
        {" "}
        {/* Adjusted height and shadow */}
        <CardHeader className="border-b">
          <CardTitle className="flex items-center space-x-2">
            <Bot className="h-5 w-5 text-blue-500" />
            <span>Chat with AI Assistant</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="flex-1 p-0 overflow-hidden">
          {" "}
          {/* Added overflow-hidden */}
          <ScrollArea
            className="h-full p-4"
            ref={scrollAreaRef}
            id="chat-scroll-area"
          >
            {" "}
            {/* Changed to h-full */}
            <div className="space-y-4 pb-4">
              {" "}
              {/* Added padding bottom */}
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${
                    message.type === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`flex max-w-[80%] items-end space-x-2 ${
                      // items-end for better bubble alignment
                      message.type === "user"
                        ? "flex-row-reverse space-x-reverse"
                        : ""
                    }`}
                  >
                    <div
                      className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                        message.type === "user" ? "bg-blue-500" : "bg-green-500"
                      } self-end mb-1`} // Avatar alignment
                    >
                      {message.type === "user" ? (
                        <User className="h-4 w-4 text-white" />
                      ) : (
                        <Bot className="h-4 w-4 text-white" />
                      )}
                    </div>
                    <div
                      className={`rounded-lg p-3 shadow ${
                        // Added shadow to bubbles
                        message.type === "user"
                          ? "bg-blue-500 text-white rounded-br-none" // Tail for user
                          : "bg-gray-100 text-gray-900 rounded-bl-none" // Tail for AI
                      }`}
                    >
                      <div className="text-sm whitespace-pre-wrap">
                        {message.content}
                      </div>
                      <div
                        className={`text-xs opacity-70 mt-1 ${
                          message.type === "user"
                            ? "text-blue-200"
                            : "text-gray-500"
                        }`}
                      >
                        {message.timestamp.toLocaleTimeString([], {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </div>
                      {message.analysis && message.type === "ai" && (
                        <div className="mt-2 pt-2 border-t border-gray-200">
                          <div className="flex items-center space-x-2 text-xs text-gray-600">
                            <span>
                              Confidence:{" "}
                              {Math.round(message.analysis.confidence * 100)}%
                            </span>
                            <Badge variant="outline" className="text-xs">
                              {message.analysis.sentiment}
                            </Badge>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="flex items-end space-x-2 max-w-[80%]">
                    <div className="flex-shrink-0 w-8 h-8 rounded-full bg-green-500 flex items-center justify-center self-end mb-1">
                      <Bot className="h-4 w-4 text-white" />
                    </div>
                    <div className="bg-gray-100 rounded-lg p-3 shadow rounded-bl-none">
                      <div className="flex items-center space-x-2">
                        <Loader2 className="h-4 w-4 animate-spin text-gray-600" />
                        <span className="text-sm text-gray-700">
                          AI is thinking...
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>
        </CardContent>
        <div className="border-t p-4 bg-white">
          {" "}
          {/* Added padding and bg */}
          <div className="flex items-center space-x-2">
            {" "}
            {/* items-center for vertical alignment */}
            <Input
              placeholder="Ask about sales, forecasts, customers..."
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              disabled={isLoading}
              className="flex-1 rounded-full px-4 py-2 focus:ring-blue-500 focus:border-blue-500" // Rounded input
            />
            <Button
              onClick={handleSendMessage}
              disabled={isLoading || !inputMessage.trim()}
              className="rounded-full p-2" // Rounded button
              size="icon" // Makes button square/circle for icons
            >
              {isLoading ? (
                <Loader2 className="h-5 w-5 animate-spin" />
              ) : (
                <Send className="h-5 w-5" />
              )}
            </Button>
          </div>
          {/* Quick Action Buttons */}
          <div className="flex flex-wrap gap-2 mt-3">
            {[
              "How are my sales performing this month?",
              "What's my sales forecast for next month?",
              "Analyze my customer retention",
              "Check my inventory status",
            ].map((quickActionText) => (
              <Button
                key={quickActionText}
                variant="outline"
                size="sm"
                onClick={() => {
                  setInputMessage(quickActionText);
                  // Optionally, you can immediately call handleSendMessage here if you want
                  // handleSendMessage(); // This would require inputMessage to be set first, or pass it directly
                }}
                disabled={isLoading}
                className="text-xs rounded-full px-3 py-1" // Smaller, rounded quick actions
              >
                {quickActionText.length > 25
                  ? quickActionText.substring(0, 22) + "..."
                  : quickActionText.split(" ").slice(0, 3).join(" ")}
              </Button>
            ))}
          </div>
        </div>
      </Card>
    </div>
  );
}
